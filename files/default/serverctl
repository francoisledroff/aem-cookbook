#!/bin/sh
#---------------------------------------------------------------------
# $Id: serverctl 73877 2011-01-25 11:31:10Z bdelacre $
#---------------------------------------------------------------------
# This is the Quickstart variant of the serverctl script, which
# is subtly different from the CQSE variant - check diffs for 
# more info.
#---------------------------------------------------------------------

### checking CQ_JVM_OPTS is set
[ -f /etc/default/aem ] && . /etc/default/aem

if [ -z "$CQ_JVM_OPTS" ] ;  then
  echo "CQ_JVM_OPTS is not set, please set it in /etc/default/aem" >&2
  exit 1
fi


#---------------------------------------------------------------------
# The following variables can be adapted for your environment.
# Suitable defaults are used if they are commented out.
#---------------------------------------------------------------------
# define a special java home
#JAVA_HOME=/opt/java/jdk1.6.0

# enable this as default command if no command argument is given
#CQ_COMMAND=start

# define the port cqse listens to. overrides settings in server.xml
#CQ_PORT=@cqse.dist.port@

# define the interface cqse binds to. overrides settings in server.xml
#CQ_INTERFACE=@cqse.dist.host@

# enable if jvm-debugging should be enabled
#CQ_JVM_DEBUG=socket

# set the min amount of java heap space
#CQ_HEAP_MIN=256

# set the max amount of java heap space
#CQ_HEAP_MAX=512

# set the amount of java permgen space
#CQ_PERMGEN=128

# add additional options to the jvm
#CQ_JVM_OPTS=-enableassertions

# enable starting the engine in foreground
#CQ_FOREGROUND=y

# default value of CQ_CONTEXT, which the script sets as the current
# directory befault starting the JVM
DEFAULT_CQ_CONTEXT="`dirname $0`/../.."

# additional Quickstart options
#QUICKSTART_OPTS=""

# jar file to run (defaults to findRunnableJar result)
#CQ_RUNNABLE_JAR=""

#---------------------------------------------------------------------
# Don't edit below here
#---------------------------------------------------------------------

KILL="/bin/kill"
NOHUP="/usr/bin/nohup"

#---------------------------------------------------------------------
# functions
#---------------------------------------------------------------------

# print the usage info
usage() {
cat <<-@@
Day Quickstart Server Control, version 5.0.0 ($CQ_SVN_ID)
    usage: `basename $0` [options] {start|stop|restart|status}

Engine Options:
    --context          the communique context directory, defaults to `dirname $0`
    --port, -p         the default port to listen to if not overrriden in server.xml
    --logdir           the log directory for startup.log. defaults to `dirname $0`/logs
    --log              the startup log file. defaults to `dirname $0`/logs/startup.log
    --interface, -a    the interface to bind to (use 0.0.0.0 for any).
    --jar              explicitely specify the jar file to run, relative to --context

Java Options:
    --javahome         the java home directory. overrides JAVA_HOME env var.
    --heap-min         the minimum heap in megabytes. defaults to 128
    --heap-max         the maximum heap in megabytes. defaults to 256
    --permgen          the permgen space in megabytesm defaults to 128
    --debug, -d [socket|shmem]  
                       starts jvm in debug mode. default 'socket'
    --debug-suspended [socket|shmem]  
                       starts jvm in suspended debug mode. default 'socket'
    --debug-port       port for debug address. default "${CQ_JVM_DEBUG_PORT}"
    --profile [yjp]    start jvm with YourKit Java Profiler
    --javaopts         additional java options
    --jaas             use jaas.config. default is disabled
    --jaas-config      config for jaas. default is <start script folder>/etc/jaas.config
    --verbose-gc       turn on vebose gc

Other options
    --fg, -D           starts cq in foreground
    --bg               starts cq in background. this is the default.
    --verbose, -v      be more verbose 
    --dry              prepare but do not start
    --help, -h         show this help
    --max-files        sets the ulimit for max open files before executing the jvm. 
                       default is 8192
@@
}

# init the defaults
initDefaults() {
    BASEDIR=`fullpath -d $0`
    CQ_SVN_ID='$Rev: 73877 $'
    export CQ_SVN_ID
    CQ_CONTEXT="${CQ_CONTEXT:-$DEFAULT_CQ_CONTEXT}"
    export CQ_CONTEXT
    export CQ_PORT
     CQ_LOGDIR="${CQ_LOGDIR:-"$BASEDIR/logs"}"
    export CQ_LOGDIR
     CQ_LOG="${CQ_LOG:-"$CQ_LOGDIR/startup.log"}"
    export CQ_LOG
    CQ_INTERFACE="${CQ_INTERFACE:-$CQ_ADDRESS}"
    export CQ_INTERFACE
    CQ_JVM_HEAP_MIN="${CQ_HEAP_MIN:-"128"}"
    export CQ_JVM_HEAP_MIN
    CQ_JVM_HEAP_MAX="${CQ_HEAP_MAX:-"384"}"
    export CQ_JVM_HEAP_MAX
    CQ_PERMGEN="${CQ_PERMGEN:-"128"}"
    export CQ_PERMGEN
    export CQ_JVM_JAAS
    CQ_JVM_JAAS_CONFIG="`dirname $0`/etc/jaas.config"
    export CQ_JVM_JAAS_CONFIG
    export CQ_JVM_OPTS
    export CQ_JVM_VERBOSE_GC
    export CQ_JVM_DEBUG
    CQ_JVM_DEBUG_PORT=${CQ_JVM_DEBUG_PORT:-30303}
    export CQ_JVM_DEBUG_PORT
    CQ_JVM_DEBUG_SUSPENDED=n
    export CQ_JVM_DEBUG_SUSPENDED
    export CQ_JVM_PROFILE
    export CQ_FOREGROUND
    export CQ_DRY
    CQ_COMMAND=${CQ_COMMAND}
    export CQ_COMMAND
    export CQ_VERBOSE
    CQ_MAX_OPEN_FILES="${CQ_MAX_OPEN_FILES:-"8192"}"
    export CQ_MAX_OPEN_FILES
    STOP_MESSAGE="${STOP_MESSAGE:-Use CTRL-C or the stop script to stop server}"
    export STOP_MESSAGE
    NOFORK_OPT="-nofork -nobrowser"
    export NOFORK_OPT
    QUICKSTART_OPTS="${QUICKSTART_OPTS:-$NOFORK_OPT}"
    export QUICKSTART_OPTS
}

# echo to stderr and to the log file
_log() {
  _level=$1; shift
  if [ "$use_stderr" = "YES" ] ; then
    echo "`date '+%d.%m.%Y %H:%M:%S'` *$_level* $*" >&2
  fi
  if [ -w "$CQ_LOG" ]; then
    echo "`date '+%d.%m.%Y %H:%M:%S'` *$_level* $*" >> "$CQ_LOG"
  fi
}

# log an error message
err() {
    _log "ERROR" $*
}

# log an warning message
warn() {
    _log "WARN " $*
}

# log an info message
info() {
    _log "INFO " $*
}

# fatal error
fatal() {
        err $*
        exit 1
}

# print all relevant variables
dump() {
   set | grep CQ | sort 
}

# calculate the fullpath
fullpath() {
    OPWD="$PWD"
    if [ "$1" = "-d" ]; then
        cd `dirname $2`
        NPWD=`pwd -L`
    else
        cd `dirname $1`
        NPWD=`pwd -L`/`basename $1`
    fi

    # Bug 21241: on cygwin, convert path to windows style
    # Note: uname -s returns something like CYGWIN_NT-5.1
    IS_CYGWIN=`uname -s | grep "CYGWIN" 2>&1 >/dev/null`
    if [ -n "${IS_CYGWIN}" ]; then
        NPWD=`cygpath -m $NPWD`
    fi
    
    echo $NPWD
    cd $OPWD
}

# check if verbose level
verbose() {
   test -n "$CQ_VERBOSE"  
}

# print the java version of the $CQ_JVM vm
javaVersion() {
    jvm_version=`$CQ_JVM -version 2>&1 | grep "java version"`
    case "$jvm_version" in
      "java version \"1.2"*)  echo 1.2;;
      "java version \"1.3"*)  echo 1.3;;
      "java version \"1.4"*)  echo 1.4;;
      "java version \"1.5"*)  echo 1.5;;
      "java version \"1.6"*)  echo 1.6;;
      *)                      echo ;;
    esac
}

# print the debug info
printDebug() {
    if [ "$CQ_JVM_DEBUG" = "socket" ]; then
        info "attaching debugger on port ${CQ_JVM_DEBUG_PORT}"
        if [ "${CQ_JVM_DEBUG_SUSPENDED}" = y ]; then
            info "jvm is suspended! attach debugger to continue."
        fi
    fi
    if [ "$CQ_JVM_DEBUG" = "shmem" ]; then
        info "attaching debugger using shared memory"
        if [ "${CQ_JVM_DEBUG_SUSPENDED}" = y ]; then
            info "jvm is suspended! attach debugger to continue."
        fi
    fi
}

# set ulimit value appropriately
setUlimit()  {
    NOF=`ulimit -n`
    if [ $NOF -lt $CQ_MAX_OPEN_FILES ]; then
        # already set limit is too low, increase it at least
        # standard value
        ulimit -n $CQ_MAX_OPEN_FILES
    fi
}

# Echo the path of the runnable jar to use, relative to CQ_CONTEXT 
findRunnableJar() {
    # look in CQ_HOME and under its target subfolder
    # for a single jar file containing crx, cq or quickstart in its name
    OLD_PWD=`pwd`
    cd $CQ_CONTEXT > /dev/null
    JARPATH="*.jar target/*.jar"
    EXPR="crx|cq|quickstart"
    JARS=`ls $JARPATH 2>/dev/null |  egrep $EXPR`
    COUNT=` ( for i in $JARS ; do echo $i ; done ) | wc -l `
    if [ $COUNT -ne 1 ] ; then
        MSG="Expected 1 runnable jar file in ($JARPATH) under $PWD, found $JARS"
        err $MSG
        echo $MSG >&2
    fi
    cd $OLD_PWD > /dev/null
    echo $JARS
}

#---------------------------------------------------------------------
# main program begins here
#---------------------------------------------------------------------

# parse the arguments
initDefaults
while [ -n "$1" ]; do
    case "$1" in
        '--context')
            CQ_CONTEXT=$2
            shift;;
        '--port' | '-p')
            CQ_PORT=$2
            shift;;
        '--logdir')
            CQ_LOGDIR=$2
            shift;;
        '--log')
            CQ_LOG=$2
            shift;;
        '--interface' | '-a')
            CQ_INTERFACE=$2
            shift;;
        '--jar')
            CQ_RUNNABLE_JAR=$2
            shift;;
        '--javahome')
            JAVA_HOME=$2
            shift;;
        '--javaopts')
            CQ_JVM_OPTS=$2
            shift;;
        '--heap-min')
            CQ_JVM_HEAP_MIN=$2
            shift;;
        '--heap-max')
            CQ_JVM_HEAP_MAX=$2
            shift;;
        '--permgen')
            CQ_PERMGEN=$2
            shift;;
        '--debug' | '-d' | '--debug-suspended')
            CQ_JVM_DEBUG=socket
            if [ "$1" = "--debug-suspended" ]; then
                CQ_JVM_DEBUG_SUSPENDED=y
            fi
            if [ "$2" = "socket" -o "$2" = "shmem" ]; then
                CQ_JVM_DEBUG=$2
                shift
            fi;;
         '--profile')
            CQ_JVM_PROFILE=yjp
            if [ "$2" = "yjp" ]; then
                CQ_JVM_PROFILE=$2
                shift
            fi;;
        '--debug-port')
            CQ_JVM_DEBUG_PORT=$2
            shift;;
        '--debug-suspended')
            CQ_JVM_DEBUG_SUSPENDED=y
            ;;
        '--jaas')
            CQ_JVM_JAAS=y
            ;;
        '--jaas-config')
            CQ_JVM_JAAS_CONFIG=$2
            shift;;
        '--verbose-gc')
            CQ_JVM_VERBOSE_GC=y
            ;;
        '--fg' | '-D')
            CQ_FOREGROUND=y
            ;;
        '--bg')
            CQ_FOREGROUND=n
            ;;
        '--verbose' | '-v')
            CQ_VERBOSE=y
            ;;
        '--max-files')
            CQ_MAX_OPEN_FILES=$2
            shift;;
        '--dry')
            CQ_DRY=y
            ;;
        '--help' | '-h')
            usage
            exit ;;
        'status'|'start'|'stop'|'restart')
            CQ_COMMAND=$1
            ;;
        *)
            echo "Invalid option: $1"
            usage
            exit;;
        esac
    shift
done

# get and check runnable jar filename
#--------------------------------------------------------------------------------
CQ_RUNNABLE_JAR="${CQ_RUNNABLE_JAR:-`findRunnableJar`}"
CQ_RUNNABLE_JAR_FULLPATH=${CQ_CONTEXT}/${CQ_RUNNABLE_JAR}
if [ -z "$CQ_RUNNABLE_JAR" ] ; then
    echo "Runnable jar not found, cannot start" >&2
    exit 4
fi
if [ ! -f "$CQ_RUNNABLE_JAR_FULLPATH" ] ; then
    echo "$CQ_RUNNABLE_JAR_FULLPATH not found" >&2
    exit 4
fi

# process options
#--------------------------------------------------------------------------------
case "$CQ_COMMAND" in
  'start')                        # test to be sure we can run, then bg
                                  # the startup
    use_stderr="YES"


    if [ ! -d "$CQ_LOGDIR" ] ; then
      mkdir -p "$CQ_LOGDIR" 2>/dev/null || \
        ( echo "mkdir failed for $CQ_LOGDIR" >&2 ; exit 2 )
    fi
    for file in "$CQ_LOG" "$CQ_LOGDIR/cq.pid" ; do
      if [ ! -w "$file" ] ; then
        touch "$file" 2>/dev/null || \
          ( "Couldn't create file $file" >&2 ; exit 2 )
      fi
    done

    if [ -n "$JAVA_HOME" -a -x "$JAVA_HOME/bin/java" ] ; then
      CQ_JVM=$JAVA_HOME/bin/java
    else
      JAVA_HOME=
      CQ_JVM="`which java 2>/dev/null`"
      if [ -z "$CQ_JVM" ] ; then
        for pfix in "/usr/local" "/opt" "/usr" ; do
          for jvers in "java" "j2sdk" "j2sdk1.4" "java1.4" \
                       "j2sdk1.3.1" "java1.3.1" "j2sdk1.3" "java1.3" ; do
            if [ -x "$pfix/$jvers/bin/java" ] ; then
              CQ_JVM="$pfix/$jvers/bin/java"
              break 2
            fi
          done
        done
        if [ -z "$CQ_JVM" ] ; then
          err "Unable to locate java, please make sure java is installed and JAVA_HOME set"
          exit 3
        fi
      fi
    fi
    
    # check if already running
    CQ_PID=`cat "$CQ_LOGDIR/cq.pid" 2> /dev/null`
    if [ -n "$CQ_PID" ]; then
        if ps -p $CQ_PID > /dev/null; then
            err "process $CQ_PID already running. please stop and try again."
            exit 4
        else
            warn "pid file $CQ_LOGDIR/cq.pid present, but process not running. "\
                 "maybe unclean shutdown ?"
            rm -f "$CQ_LOGDIR/cq.pid"
            CQ_PID=
        fi
    fi
    
    # assemble the startup param
    CQ_JAVA_VERSION=`javaVersion`
    if [ -n "$CQ_JVM_JAAS" ]; then
        jvmOpts="$jvmOpts -Djava.security.auth.login.config=$CQ_JVM_JAAS_CONFIG"
    fi
    if [ -n "$CQ_JVM_VERBOSE_GC" ]; then
        jvmOpts="$jvmOpts -verbose:gc"
    fi
    jvmOpts="$jvmOpts -Xms${CQ_JVM_HEAP_MIN}m"
    jvmOpts="$jvmOpts -Xmx${CQ_JVM_HEAP_MAX}m"
    jvmOpts="$jvmOpts -XX:MaxPermSize=${CQ_PERMGEN}m"
    jvmOpts="$jvmOpts -Djava.awt.headless=true"

    if [ -n "$CQ_JVM_DEBUG" ]; then
        jvmOpts="$jvmOpts -Xdebug -Xnoagent -Djava.compiler=NONE \
-Xrunjdwp:transport=dt_$CQ_JVM_DEBUG,address=$CQ_JVM_DEBUG_PORT,\
server=y,suspend=${CQ_JVM_DEBUG_SUSPENDED}"
    fi
    if [ "$CQ_JVM_PROFILE" = yjp ]; then
        if [ $CQ_JAVA_VERSION = "1.4" ]; then
            jvmOpts="$jvmOpts -Xrunyjpagent"
        else
            jvmOpts="$jvmOpts -agentlib:yjpagent"
        fi
    fi 
    jvmOpts="$jvmOpts $CQ_JVM_OPTS"

    case "`uname -s`" in
      "AIX"*)
         # AIX java has a broken JIT compiler
         # see bugs: 8810 and 9072
         JITC_COMPILEOPT=NALL{com/day/cq/contentbus/core/HierarchyMapImpl$MapNode}{setChildrenOrder}{com/day/util/Counter}{*}{com/day/cq/mq/MessageQueueImpl}{*}
         export JITC_COMPILEOPT
         ;;
    esac

    # assemble program arguments
    if [ -n "$CQ_PORT" ]; then
        cqOpts="$cqOpts -p $CQ_PORT"
    fi
    if [ -n "$CQ_INTERFACE" ]; then
        cqOpts="$cqOpts -a $CQ_INTERFACE"
    fi
    if [ -n "$QUICKSTART_OPTS" ]; then
        cqOpts="$cqOpts $QUICKSTART_OPTS"
    fi

    # executable string
    jvmExe="$CQ_JVM $jvmOpts -jar $CQ_RUNNABLE_JAR $cqOpts"
    export jvmExe

    if verbose; then 
        dump
        echo ""
        echo "Execute: $jvmExe"
        echo "From directory: $CQ_CONTEXT"
        echo ""
    fi
    if [ -n "$CQ_DRY" ]; then
        echo ""
        echo "--dry specified. not starting engine."
        exit 0
    fi

    info "Using JVM found at $CQ_JVM"
    setUlimit

    if [ -n "$CQ_FOREGROUND" ]; then
        ulimit -n $CQ_MAX_OPEN_FILES
        info "Starting in foreground"
        info "$STOP_MESSAGE"
        printDebug
        info "-----------------------------------------------------------"
        oldpwd="`pwd`"
        cd $CQ_CONTEXT || fatal "Cannot cd to $CQ_CONTEXT"
        info "Starting in $PWD"
        $jvmExe | tee -a "$CQ_LOG" 2>&1
        cd "$oldpwd" > /dev/null
        exit 0 # in case of failure
    else
        info "Starting in background..."
        printDebug
        oldpwd="`pwd`"
        cd $CQ_CONTEXT || fatal "Cannot cd to $CQ_CONTEXT"
        $NOHUP $jvmExe </dev/null >> "$CQ_LOG" 2>&1 &
        echo $! > "$CQ_LOGDIR/cq.pid"
        cd "$oldpwd" > /dev/null
        info "Started."
    fi
    exit 0
  ;;
#---------------------------------------------------------------------
  'stop')
    use_stderr="YES"
    cqpid=`/bin/cat "$CQ_LOGDIR/cq.pid" 2>/dev/null`
    if [ -z "$cqpid" ]; then
        echo "No process ID in $CQ_LOGDIR/cq.pid."
        exit 0;
    fi  
    if ps -p $cqpid > /dev/null 2>&1; then :; else
        echo "pid file $CQ_LOGDIR/cq.pid present, but process $cqpid not running. "\
                 "maybe unclean shutdown ?"
        exit 0;
    fi  

    printf "stopping..."
    $KILL $cqpid; status=$?

    if [ $status -eq 1 ]; then
        echo "Unable to kill process $cqpid"
        exit 0;
    fi; 

    COUNTER=0
    while ps -p $cqpid > /dev/null 2>&1 && [ $COUNTER -lt 60 ]; do
        printf "." 
        COUNTER=`expr $COUNTER + 1`
        sleep 2
    done
    if ps -p $cqpid > /dev/null 2>&1; then
        echo "Process $cqpid still running, unable to stop"
    else
        echo "stopped."
        rm -f "$CQ_LOGDIR/cq.pid"
    fi  
  ;;
#---------------------------------------------------------------------
  'restart')
    "$0" stop
    "$0" start
  ;;
#---------------------------------------------------------------------
  'status')
    cqpid=`/bin/cat "$CQ_LOGDIR/cq.pid" 2>/dev/null`
    if ps -p $cqpid > /dev/null 2>&1 ; then
        echo "$CQ_TITLE is running."
    else
        echo "$CQ_TITLE is stopped."
    fi
  ;;
#---------------------------------------------------------------------
  *)
    usage
    exit
  ;;
esac

