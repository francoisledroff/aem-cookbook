#!/bin/bash
#
# /etc/r.d/init.d/aem
#
# This file was generated by Chef for <%= node['fqdn'] %>.
# Do NOT modify this file by hand!
#
# of the file to the end of the tags section must begin with a #
# character. After the tags section, there should be a blank line.
# This keeps normal comments in the rest of the file from being
# mistaken for tags, should they happen to fit the pattern.>
#
# chkconfig: 35 85 15
# description: This service manages the AEM java process.
# processname: aem
# pidfile: <%= node[:aem][:install_dir] %>/crx-quickstart/logs/cq.pid

# Source function library.
. /etc/rc.d/init.d/functions

aem_ROOT="<%= node[:aem][:install_dir] %>"
aem_USER="<%= node['aem']['user'] %>"

########

APP_NAME="<%= node['aem']['appname'] %>"
SERVER_CTL="<%= node['aem']['serverctl'] %>"

DOPTS="$DOPTS --context <%= node['aem']['install_dir'] %>"
DOPTS="$DOPTS --port <%= node['aem']['port'] %>"
DOPTS="$DOPTS --logdir <%= node['aem']['log_dir'] %>"
DOPTS="$DOPTS --javahome <%= node['java']['home'] %>"
DOPTS="$DOPTS --heap-min <%= node['aem']['heap_min'] %>"
DOPTS="$DOPTS --heap-max <%= node['aem']['heap_max'] %>"
DOPTS="$DOPTS --permgen <%= node['aem']['permgen'] %>"
DOPTS="$DOPTS --log <%= node['aem']['startup_log'] %>"
DOPTS="$DOPTS --jar <%= node['aem']['jar'] %>"
DOPTS="$DOPTS --max-files <%= node['aem']['max_files'] %>"

# debug settings
#################
<% if node['aem']['debug'] -%>
DOPTS="$DOPTS --debug socket"
DOPTS="$DOPTS --debug-port <%= node['aem']['debug_port'] %>"
<% end -%>




start_cq() {
    cq=`sudo -u ${aem_USER} ${SERVER_CTL} $DOPTS start 1> <%= node['aem']['service_log'] %> 2> <%= node['aem']['service_error_log'] %> &`
    echo "$APP_NAME cq server is starting ....check your logs" $cq
}


case "$1" in
start)
    echo -n "Starting aem services: "
    sudo -u ${aem_USER} ${SERVER_CTL} ${DOPTS} status | grep running > /dev/null
    proc=$?
    if [[ "$proc" -eq 0 ]]
    then
       echo "$APP_NAME cq server is already running... check your logs"
    else
       start_cq
       INSTANCE_STATUS="$APP_NAME cq service is starting"
    fi
    touch /var/lock/subsys/aem
    
;;
stop)
    sudo -u ${aem_USER} ${SERVER_CTL} ${DOPTS} status | grep running > /dev/null
    proc=$?
    if [[ "$proc" -eq 0 ]]
    then
        cq=`sudo -u ${aem_USER} ${SERVER_CTL} ${DOPTS} $1 1> <%= node['aem']['service_log'] %> 2> <%= node['aem']['service_error_log'] %> &`
        echo "$APP_NAME cq server is stopping" $cq    
        rm -f /var/lock/subsys/aem
        INSTANCE_STATUS="$APP_NAME cq service was stopped"
    else
        echo "$APP_NAME cq server was not running..."
    fi
;;
status)

	sudo -u ${aem_USER} ${SERVER_CTL} ${DOPTS} status | grep running > /dev/null
    proc=$?
    if [[ "$proc" -eq 0 ]]
    then
       echo "$APP_NAME cq server is running"
       exit 0
    else
       echo "$APP_NAME cq server is stopped"
       exit 1
    fi
;;
restart) 
    sudo -u ${aem_USER} ${SERVER_CTL} ${DOPTS} status | grep running > /dev/null
    proc=$?
    if [[ "$proc" -eq 0 ]] 
    then
       cq=`sudo -u ${aem_USER} ${SERVER_CTL} ${DOPTS} $1 1> <%= node['aem']['service_log'] %> 2> <%= node['aem']['service_error_log'] %> &`
       echo "$APP_NAME cq service restarting.." $cq
    else
       echo  "$APP_NAME cq server was not running.... starting it" 
       start_cq
    fi
    INSTANCE_STATUS="$APP_NAME cq service is restarting"
;;
reload)
;;
*)
echo "Usage: aem {start|stop|status|restart}"
exit 1
;;
esac
